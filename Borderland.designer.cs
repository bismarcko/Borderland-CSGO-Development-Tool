#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Borderland_CSGO_Development
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Borderland")]
	public partial class BorderlandDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPatch(Patch instance);
    partial void UpdatePatch(Patch instance);
    partial void DeletePatch(Patch instance);
    partial void InsertPatchType(PatchType instance);
    partial void UpdatePatchType(PatchType instance);
    partial void DeletePatchType(PatchType instance);
    #endregion
		
		public BorderlandDataContext() : 
				base(global::Borderland_CSGO_Development.Properties.Settings.Default.BorderlandConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BorderlandDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BorderlandDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BorderlandDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BorderlandDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Patch> Patches
		{
			get
			{
				return this.GetTable<Patch>();
			}
		}
		
		public System.Data.Linq.Table<PatchType> PatchTypes
		{
			get
			{
				return this.GetTable<PatchType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patch")]
	public partial class Patch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _PATCHNAME;
		
		private int _PATCHTYPE;
		
		private System.DateTime _PATCHDATE;
		
		private string _PATCHINFO;
		
		private string _PATCHINFO_FULL;
		
		private string _LINK;
		
		private EntityRef<PatchType> _PatchType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPATCHNAMEChanging(string value);
    partial void OnPATCHNAMEChanged();
    partial void OnPATCHTYPEChanging(int value);
    partial void OnPATCHTYPEChanged();
    partial void OnPATCHDATEChanging(System.DateTime value);
    partial void OnPATCHDATEChanged();
    partial void OnPATCHINFOChanging(string value);
    partial void OnPATCHINFOChanged();
    partial void OnPATCHINFO_FULLChanging(string value);
    partial void OnPATCHINFO_FULLChanged();
    partial void OnLINKChanging(string value);
    partial void OnLINKChanged();
    #endregion
		
		public Patch()
		{
			this._PatchType1 = default(EntityRef<PatchType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PATCHNAME", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string PATCHNAME
		{
			get
			{
				return this._PATCHNAME;
			}
			set
			{
				if ((this._PATCHNAME != value))
				{
					this.OnPATCHNAMEChanging(value);
					this.SendPropertyChanging();
					this._PATCHNAME = value;
					this.SendPropertyChanged("PATCHNAME");
					this.OnPATCHNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PATCHTYPE", DbType="Int NOT NULL")]
		public int PATCHTYPE
		{
			get
			{
				return this._PATCHTYPE;
			}
			set
			{
				if ((this._PATCHTYPE != value))
				{
					if (this._PatchType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPATCHTYPEChanging(value);
					this.SendPropertyChanging();
					this._PATCHTYPE = value;
					this.SendPropertyChanged("PATCHTYPE");
					this.OnPATCHTYPEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PATCHDATE", DbType="Date NOT NULL")]
		public System.DateTime PATCHDATE
		{
			get
			{
				return this._PATCHDATE;
			}
			set
			{
				if ((this._PATCHDATE != value))
				{
					this.OnPATCHDATEChanging(value);
					this.SendPropertyChanging();
					this._PATCHDATE = value;
					this.SendPropertyChanged("PATCHDATE");
					this.OnPATCHDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PATCHINFO", DbType="NVarChar(256)")]
		public string PATCHINFO
		{
			get
			{
				return this._PATCHINFO;
			}
			set
			{
				if ((this._PATCHINFO != value))
				{
					this.OnPATCHINFOChanging(value);
					this.SendPropertyChanging();
					this._PATCHINFO = value;
					this.SendPropertyChanged("PATCHINFO");
					this.OnPATCHINFOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PATCHINFO_FULL", DbType="NVarChar(2048)")]
		public string PATCHINFO_FULL
		{
			get
			{
				return this._PATCHINFO_FULL;
			}
			set
			{
				if ((this._PATCHINFO_FULL != value))
				{
					this.OnPATCHINFO_FULLChanging(value);
					this.SendPropertyChanging();
					this._PATCHINFO_FULL = value;
					this.SendPropertyChanged("PATCHINFO_FULL");
					this.OnPATCHINFO_FULLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LINK", DbType="NVarChar(512)")]
		public string LINK
		{
			get
			{
				return this._LINK;
			}
			set
			{
				if ((this._LINK != value))
				{
					this.OnLINKChanging(value);
					this.SendPropertyChanging();
					this._LINK = value;
					this.SendPropertyChanged("LINK");
					this.OnLINKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatchType_Patch", Storage="_PatchType1", ThisKey="PATCHTYPE", OtherKey="ID", IsForeignKey=true)]
		public PatchType PatchType1
		{
			get
			{
				return this._PatchType1.Entity;
			}
			set
			{
				PatchType previousValue = this._PatchType1.Entity;
				if (((previousValue != value) 
							|| (this._PatchType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatchType1.Entity = null;
						previousValue.Patches.Remove(this);
					}
					this._PatchType1.Entity = value;
					if ((value != null))
					{
						value.Patches.Add(this);
						this._PATCHTYPE = value.ID;
					}
					else
					{
						this._PATCHTYPE = default(int);
					}
					this.SendPropertyChanged("PatchType1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatchType")]
	public partial class PatchType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _TYPENAME;
		
		private EntitySet<Patch> _Patches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTYPENAMEChanging(string value);
    partial void OnTYPENAMEChanged();
    #endregion
		
		public PatchType()
		{
			this._Patches = new EntitySet<Patch>(new Action<Patch>(this.attach_Patches), new Action<Patch>(this.detach_Patches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TYPENAME", DbType="NVarChar(32)")]
		public string TYPENAME
		{
			get
			{
				return this._TYPENAME;
			}
			set
			{
				if ((this._TYPENAME != value))
				{
					this.OnTYPENAMEChanging(value);
					this.SendPropertyChanging();
					this._TYPENAME = value;
					this.SendPropertyChanged("TYPENAME");
					this.OnTYPENAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatchType_Patch", Storage="_Patches", ThisKey="ID", OtherKey="PATCHTYPE")]
		public EntitySet<Patch> Patches
		{
			get
			{
				return this._Patches;
			}
			set
			{
				this._Patches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Patches(Patch entity)
		{
			this.SendPropertyChanging();
			entity.PatchType1 = this;
		}
		
		private void detach_Patches(Patch entity)
		{
			this.SendPropertyChanging();
			entity.PatchType1 = null;
		}
	}
}
#pragma warning restore 1591
